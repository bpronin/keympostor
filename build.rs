extern crate embed_resource;

use std::fs;
use std::fs::File;
use std::io::{BufRead, BufReader};
use std::path::Path;

const RESOURCES_FILE: &str = "res/resources.rc";
const RESOURCES_IDS_FILE: &str = "src/res_ids.rs";

fn main() {
    embed_resource::compile(RESOURCES_FILE, embed_resource::NONE)
        .manifest_required()
        .unwrap();

    generate_resource_consts();
}

fn generate_resource_consts() {
    let in_path = Path::new(RESOURCES_FILE);
    let out_path = Path::new(RESOURCES_IDS_FILE);

    let file = File::open(in_path).expect(&format!("Can't open {RESOURCES_FILE} file"));
    let reader = BufReader::new(file);

    let mut out = String::new();
    out.push_str("/* autogenerated by build.rs */\n\n");
    for line in reader.lines().flatten() {
        if line.starts_with("#define ") {
            let parts: Vec<&str> = line.split_whitespace().collect();
            if parts.len() >= 3 && parts[1].starts_with("IDI_"){
                out.push_str(&format!("pub const {}: usize = {};\n", parts[1], parts[2]));
            }
        }
    }

    fs::write(out_path, out).expect(&format!("Can't write {RESOURCES_IDS_FILE} file"));
}