use native_windows_gui::{EmbedResource, Icon};
use std::cell::RefCell;

pub(crate) mod res_ids; /* autogenerated */

#[macro_export]
macro_rules! rs {
    ($res_id:ident) => {
        &RES.with_borrow(|r| r.string($res_id))
    };
}

#[macro_export]
macro_rules! r_icon {
    ($res_id:ident) => {
        &RES.with_borrow(|r| r.icon($res_id))
    };
}

thread_local! {
    pub(crate) static RES: RefCell<Resources> = RefCell::new(Resources::new());
}

pub(crate) struct Resources {
    embed: EmbedResource,
}

impl Resources {
    fn new() -> Self {
        Self {
            embed: EmbedResource::load(None).expect("Unable to load embedded resources"),
        }
    }

    pub(crate) fn icon(&self, res_id: usize) -> Icon {
        let mut icon = Icon::default();

        Icon::builder()
            .source_embed(Some(&self.embed))
            .source_embed_id(res_id)
            .strict(true)
            .size(Some((16, 16)))
            .build(&mut icon)
            .expect("Unable to load resource icon");

        icon
    }

    pub(crate) fn string(&self, res_id: usize) -> String {
        self.embed
            .string(res_id as u32)
            .expect("Unable to read resource string")
    }
}

#[cfg(test)]
mod test {

    // #[test]
    // fn test_play_sound() {
    //     play_sound(SOUND_GAME_LOCK_OFF);
    // }

    use crate::res::res_ids::{IDI_ICON_APP, IDS_APP_TITLE};
    use crate::res::RES;

    #[test]
    fn test_string() {
        assert_eq!("Keympostor", rs!(IDS_APP_TITLE));
    }

    #[test]
    fn test_icon() {
        assert_ne!(std::ptr::null_mut(), r_icon!(IDI_ICON_APP).handle);
    }
}
